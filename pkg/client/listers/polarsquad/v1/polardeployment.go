/*
Copyright 2020 Topi Kettunen.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/topikettunen/polar-controller/pkg/apis/polarsquad/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PolarDeploymentLister helps list PolarDeployments.
// All objects returned here must be treated as read-only.
type PolarDeploymentLister interface {
	// List lists all PolarDeployments in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.PolarDeployment, err error)
	// PolarDeployments returns an object that can list and get PolarDeployments.
	PolarDeployments(namespace string) PolarDeploymentNamespaceLister
	PolarDeploymentListerExpansion
}

// polarDeploymentLister implements the PolarDeploymentLister interface.
type polarDeploymentLister struct {
	indexer cache.Indexer
}

// NewPolarDeploymentLister returns a new PolarDeploymentLister.
func NewPolarDeploymentLister(indexer cache.Indexer) PolarDeploymentLister {
	return &polarDeploymentLister{indexer: indexer}
}

// List lists all PolarDeployments in the indexer.
func (s *polarDeploymentLister) List(selector labels.Selector) (ret []*v1.PolarDeployment, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.PolarDeployment))
	})
	return ret, err
}

// PolarDeployments returns an object that can list and get PolarDeployments.
func (s *polarDeploymentLister) PolarDeployments(namespace string) PolarDeploymentNamespaceLister {
	return polarDeploymentNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PolarDeploymentNamespaceLister helps list and get PolarDeployments.
// All objects returned here must be treated as read-only.
type PolarDeploymentNamespaceLister interface {
	// List lists all PolarDeployments in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.PolarDeployment, err error)
	// Get retrieves the PolarDeployment from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.PolarDeployment, error)
	PolarDeploymentNamespaceListerExpansion
}

// polarDeploymentNamespaceLister implements the PolarDeploymentNamespaceLister
// interface.
type polarDeploymentNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PolarDeployments in the indexer for a given namespace.
func (s polarDeploymentNamespaceLister) List(selector labels.Selector) (ret []*v1.PolarDeployment, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.PolarDeployment))
	})
	return ret, err
}

// Get retrieves the PolarDeployment from the indexer for a given namespace and name.
func (s polarDeploymentNamespaceLister) Get(name string) (*v1.PolarDeployment, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("polardeployment"), name)
	}
	return obj.(*v1.PolarDeployment), nil
}
